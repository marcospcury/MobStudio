angular.module('appMobStudio', [
    'ui.router',
    'ngAnimate',
    'toastr'
  ])
angular.module('appMobStudio').constant('consts', {
    appName: 'Mob Studio App',
    version: '1.0',
    owner: 'MrRobot',
    year: '2017',
    site: 'http://mr-robot.cloud',
    apiUrl: 'http://localhost:3000/api',
  }).run(['$rootScope', 'consts', function($rootScope, consts) {
    $rootScope.consts = consts
  }])
angular.module('appMobStudio').config([
  '$stateProvider',
  '$urlRouterProvider',
  function($stateProvider, $urlRouterProvider) {
    $stateProvider.state('cadastroClientes', {
      url: "/cadastros/clientes",
      templateUrl: "cadastros/clientes/tabs.html"
    }).state('billingCycle', {
      url: "/billingCycles?page",
      templateUrl: "billingCycle/tabs.html"
    })

    $urlRouterProvider.otherwise('/dashboard')
}])

angular.module('appMobStudio').controller('clientesController', [
  '$scope',
  '$http',
  '$location',
  'msgs',
  'tabs',
  'consts',
  ClientesController
])

function ClientesController($scope,$http, $location, msgs, tabs, consts) {
  $scope.getClientes = () => {
    const url = `api/clientes`
    $http.get(url).then(function(resp) {
      $scope.clientes = resp.data
      $scope.cliente = {}
      initEnderecos()
    })
    tabs.show($scope, {tabList: true, tabCreate: true})
  }

  $scope.showTabUpdate = (cliente) => {
    $scope.cliente = cliente
    tabs.show($scope, {tabUpdate: true})
  }
  
  $scope.updateCliente = () => {
    const url = `api/clientes/${$scope.cliente._id}`
    $http.put(url, $scope.cliente).then((response) => {
      $scope.cliente = {}
      initEnderecos()
      $scope.getClientes()
      tabs.show($scope, {tabList: true, tabCreate: true})
      msgs.addSuccess('Cliente atualizado com sucesso!')
    }).catch((resp) => {
      msgs.addError(resp.data.errors)
    })
  }
  
  $scope.createCliente = () => {
    const url = `api/clientes`
    $http.post(url, $scope.cliente).then((response) => {
      $scope.cliente = {}
      initEnderecos()
      $scope.getClientes()
      tabs.show($scope, {tabList: true, tabCreate: true})
      msgs.addSuccess('Cliente incluído com sucesso!')
    }).catch((resp) => {
      msgs.addError(resp.data.errors)
    })
  }
  $scope.showTabDelete = function(cliente) {
    $scope.cliente = cliente
    tabs.show($scope, {tabDelete: true})
  }
  
  $scope.deleteCliente = () => {
    const url = `api/clientes/${$scope.cliente._id}`
    $http.delete(url, $scope.cliente).then((response) => {
      $scope.cliente = {}
      initEnderecos()
      $scope.getClientes()
      tabs.show($scope, {tabList: true, tabCreate: true})
      msgs.addSuccess('Cliente excluído com sucesso!')
    }).catch((resp) => {
      msgs.addError(resp.data.errors)
    })
  }

  $scope.cancel = () => {
    tabs.show($scope, {tabList: true, tabCreate: true})
    $scope.cliente = {}
    initEnderecos()
  }
  
  $scope.addEndereco = (index) => {
    $scope.cliente.Enderecos.splice(index + 1, 0, {})
  }
  
  $scope.deleteEndereco = (index) => {
    $scope.cliente.Enderecos.splice(index, 1)
  }
  
  var initEnderecos = () => {
    if(!$scope.cliente.Enderecos || !$scope.cliente.Enderecos.length) {
      $scope.cliente.Enderecos = []
      $scope.cliente.Enderecos.push({})
    }
  }

  $scope.getClientes()  
  
}

angular.module('appMobStudio').component('contentHeader', {
   bindings: {
      name: '@',
      small: '@',
   },
   template: `
      <section class="content-header">
        <h1>{{ $ctrl.name }} <small>{{ $ctrl.small }}</small></h1>
      </section>
   `
});

angular.module('appMobStudio').component('field', {
  bindings: {
    id: '@',
    label: '@',
    type: '@',
    grid: '@',
    model: '=',
    placeholder: '@',
    readonly: '<'
  },
  controller: [
    'gridSystem',
    function(gridSystem) {
      this.$onInit = () => this.gridClasses = gridSystem.toCssClasses(this.grid)
    }
  ],
  template: `
   <div class="{{ $ctrl.gridClasses }}">
     <div class="form-group">
       <label for="{{ $ctrl.id }}">{{ $ctrl.label }}</label>
       <input ng-model="$ctrl.model" id="{{ $ctrl.id }}" class="form-control"
          type="{{ $ctrl.type }}" placeholder="{{ $ctrl.placeholder }}"
          ng-readonly="$ctrl.readonly" />
     </div>
   </div>
  `
});

angular.module('appMobStudio').component('paginator', {
   bindings: {
     url: '@',
     pages: '@',
   },
   controller: ['$location', function($location) {
     this.$onInit = function() {
        var pages = parseInt(this.pages) || 1;
        this.pagesArray = Array(pages).fill(0).map((e, i) => i + 1);
        this.current = parseInt($location.search().page) || 1;
        this.needPagination = this.pages > 1;
        this.hasPrev = this.current > 1;
        this.hasNext = this.current < this.pages;

        this.isCurrent = function(i) {
          return this.current == i
        }
     }

   }],
   template: `
      <ul ng-if="$ctrl.needPagination"
        class="pagination pagination-sm no-margin pull-right">
        <li ng-if="$ctrl.hasPrev">
          <a href="{{ $ctrl.url }}?page={{ $ctrl.current - 1}}">«</a>
        </li>
        <li ng-class="{active: $ctrl.isCurrent(i)}"
          ng-repeat="i in $ctrl.pagesArray">
          <a href="{{ $ctrl.url }}?page={{i}}">{{i}}</a>
        </li>
        <li ng-if="$ctrl.hasNext">
          <a href="{{ $ctrl.url }}?page={{ $ctrl.current + 1}}">»</a>
        </li>
      </ul>
   `
})

angular.module('appMobStudio').component('valueBox', {
  bindings: {
    grid: '@',
    colorClass: '@',
    value: '@',
    text: '@',
    iconClass: '@'
  },
  controller: [
    'gridSystem',
    function(gridSystem) {
      this.$onInit = () => this.gridClasses = gridSystem.toCssClasses(this.grid)
    }
  ],
  template: `
  <div class="{{ $ctrl.gridClasses }}">
    <div class="small-box {{ $ctrl.colorClass }}">
      <div class="inner">
        <h3>{{ $ctrl.value }}</h3>
        <p>{{ $ctrl.text }}</p>
      </div>
      <div class="icon">
        <i class="{{ $ctrl.iconClass }}"></i>
      </div>
    </div>
  </div>
  `
})

angular.module('appMobStudio').factory('gridSystem', [ function() {

  function toCssClasses(numbers) {
    const cols = numbers ? numbers.split(' ') : []
    let classes = ''

    if(cols[0]) classes += `col-xs-${cols[0]}`
    if(cols[1]) classes += ` col-sm-${cols[1]}`
    if(cols[2]) classes += ` col-md-${cols[2]}`
    if(cols[3]) classes += ` col-lg-${cols[3]}`

    return classes
  }

  return { toCssClasses }
}])

angular.module('appMobStudio').factory('msgs', [
  'toastr',
  MsgsFactory
])

function MsgsFactory(toastr) {
  function addSuccess(msgs) {
    addMsg(msgs, 'Sucesso', 'success')
  }

  function addError(msgs) {
    addMsg(msgs, 'Erro', 'error')
  }

  function addMsg(msgs, title, method) {
    if(msgs instanceof Array) {
      msgs.forEach(msg => toastr[method](msg, title))
    } else {
      toastr[method](msgs, title)
    }
  }

  return { addSuccess, addError }
}

angular.module('appMobStudio').factory('tabs', [ function() {

   function show(owner, {
      tabList = false,
      tabCreate = false,
      tabUpdate = false,
      tabDelete = false
   }) {
      owner.tabList = tabList
      owner.tabCreate = tabCreate
      owner.tabUpdate = tabUpdate
      owner.tabDelete = tabDelete
   }

   return { show }
}])
